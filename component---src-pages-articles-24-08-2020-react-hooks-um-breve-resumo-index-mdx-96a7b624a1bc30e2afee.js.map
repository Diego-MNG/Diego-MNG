{"version":3,"sources":["webpack:///./src/pages/articles/24-08-2020-react-hooks-um-breve-resumo/index.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","id","file","isMDXComponent"],"mappings":"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","file":"component---src-pages-articles-24-08-2020-react-hooks-um-breve-resumo-index-mdx-96a7b624a1bc30e2afee.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Gist from \"../../../components/Gist/Gist\";\nexport const _frontmatter = {\n  \"path\": \"/react-hooks-um-breve-resumo\",\n  \"date\": \"2020-08-24T00:00:00.000Z\",\n  \"title\": \"React Hooks — Um “Breve” Resumo\",\n  \"image\": \"./images/featured.jpeg\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://cdn-images-1.medium.com/max/1800/1*Ea-TTjr8AKGdsg1nnBsZWw.jpeg\",\n        \"alt\": \"https://cdn-images-1.medium.com/max/1800/1*Ea-TTjr8AKGdsg1nnBsZWw.jpeg\"\n      }}></img></p>\n    <p>{`Photo by Me :D`}</p>\n    <h3>{`React Hooks — Um “Breve” Resumo`}</h3>\n    <p>{`Este artigo foi escrito com a finalidade fornecer um resumo dos principais aspectos do `}<em parentName=\"p\">{`Hooks`}</em>{` de uma maneira simples e direta para que você já consiga escrever seus primeiros componentes de função. Ele é voltado principalmente a usuários que possuam ao menos o conhecimento básico de React.`}</p>\n    <p>{`Serão abordados os seguintes temas:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Motivos para usar `}<em parentName=\"li\">{`Hooks`}</em></li>\n      <li parentName=\"ul\">{`Migrando uma aplicação com componentes de classe`}</li>\n      <li parentName=\"ul\">{`Definição de um `}<em parentName=\"li\">{`Hook`}</em></li>\n      <li parentName=\"ul\">{`Estados`}</li>\n      <li parentName=\"ul\">{`Ciclo de vida`}</li>\n      <li parentName=\"ul\">{`Criando um `}<em parentName=\"li\">{`Hook`}</em>{` customizado`}</li>\n    </ul>\n    <h3>{`Por que usar Hooks?`}</h3>\n    <p>{`Em grandes projetos que utilizam componentes de classe é comum encontrar lógicas que não se relacionam compartilhando o mesmo método de ciclo de vida, atribuindo complexidade ao componente e dificultando a manutenção. Com o `}<em parentName=\"p\">{`Hook`}</em>{` `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`useEffect`}</code>{` se torna simples a divisão do código em pequenos blocos que possuam apenas conteúdos relacionados.`}</p>\n    <p>{`Em componentes de classes se torna difícil reaproveitar lógicas de estado sem recorrer a frameworks que nos obriga a refatorar o código utilizando diversos `}<em parentName=\"p\">{`wrappers`}</em>{` e `}<em parentName=\"p\">{`reducers`}</em>{`. Em componentes de função isso é resolvido criando o seu próprio `}<em parentName=\"p\">{`Hook`}</em>{`.`}</p>\n    <p>{`Classes se tornam complexas para diversos desenvolvedores iniciantes, principalmente pelo entendimento do uso do `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`this`}</code>{`, o código se torna verboso e sempre é necessário se lembrar do `}<em parentName=\"p\">{`bind`}</em>{` de `}<em parentName=\"p\">{`event listeners`}</em>{`.`}</p>\n    <h3>{`Como migrar um projeto para Hooks?`}</h3>\n    <p><em parentName=\"p\">{`Hooks`}</em>{` foi criado para ser totalmente compatível com componentes definidos como classes, podendo em um projeto coexistir componentes de função e de classe que se relacionam.`}</p>\n    <p>{`É possível adotar uma estratégia de adesão gradual desta tecnologia, apenas criando novos componentes em `}<em parentName=\"p\">{`Hooks`}</em>{` e refatorando o código antigo apenas quando necessário trabalhar sobre ele.`}</p>\n    <h3>{`O que é um Hook?`}</h3>\n    <p><em parentName=\"p\">{`Hook`}</em>{` é uma função que permite a utlização de recursos do React para lidar com estados e ciclos de vida em um componente de função.`}</p>\n    <p>{`É possível criar um `}<em parentName=\"p\">{`Hook`}</em>{` customizado para reaproveitar comportamentos e lógicas de estado que se repetem em diferentes componentes.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Obs: Um Hook pode ser utilizado apenas em componentes de função.`}</p>\n    </blockquote>\n    <h3>{`Estados`}</h3>\n    <p>{`Para lidar com os estados de um componente de função é utilizado o `}<em parentName=\"p\">{`Hook`}</em>{` `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`useState`}</code>{`. Ele recebe como parâmetro o valor inicial do estado a ser utlizado durante a primeira renderização e retorna um par de valores, sendo estes as atuais informações do estado e uma função para atualizá-las.`}</p>\n    <Gist id=\"3fc32977e1a27bbdca62d93c6b1bd70b\" file=\"UseStateExample.js\" mdxType=\"Gist\" />\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://codesandbox.io/s/react-hooks-state-exemplo-m6ckx?file=/src/App.js\"\n      }}>{`https://codesandbox.io/s/react-hooks-state-exemplo-m6ckx?file=/src/App.js`}</a></p>\n    <p>{`O código acima é um exemplo da utilização do `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`useState`}</code>{`, para definição do estado de contagem que será inicializado com o valor `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`0`}</code>{` . É utilizado `}<em parentName=\"p\">{`desestruturação`}</em>{` para declaração do estado `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`count`}</code>{` e sua função de atualização `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`setCount`}</code><em parentName=\"p\">{`.`}</em>{` Neste componente ao clicar sobre o botão, o valor do estado será incrementado utilizando `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`setCount`}</code>{`.`}</p>\n    <p>{`Este mesmo exemplo em um componente de classe seria semelhante ao código abaixo:`}</p>\n    <Gist id=\"3fc32977e1a27bbdca62d93c6b1bd70b\" file=\"ClassComponentStateExample.js\" mdxType=\"Gist\" />\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://codesandbox.io/s/react-state-exemplo-xst3x?file=/src/App.js\"\n      }}>{`https://codesandbox.io/s/react-state-exemplo-xst3x?file=/src/App.js`}</a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Obs: leia sobre desestruturação em: `}<a parentName=\"p\" {...{\n          \"href\": \"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Atribuicao_via_desestruturacao\"\n        }}>{`https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Atribuicao_via_desestruturacao`}</a></p>\n    </blockquote>\n    <p>{`Um estado é geralmente utilizado para armazenar `}<em parentName=\"p\">{`números, textos, vetores`}</em>{` e `}<em parentName=\"p\">{`objetos.`}</em>{` Independente do tipo do valor a ser armazenado, a utilização segue o mesmo padrão do primeiro exemplo.`}</p>\n    <Gist id=\"3fc32977e1a27bbdca62d93c6b1bd70b\" file=\"UseStateExampleWithObject.js\" mdxType=\"Gist\" />\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://codesandbox.io/s/react-hooks-state-exemplo-ux3l5?file=/src/App.js:0-229\"\n      }}>{`https://codesandbox.io/s/react-hooks-state-exemplo-ux3l5?file=/src/App.js:0-229`}</a></p>\n    <h3>{`Ciclo de vida`}</h3>\n    <p>{`Diferente de componentes de classe que possuem métodos específicos para cada estágio do ciclo de vida, em componentes de função é utilizado o `}<em parentName=\"p\">{`Hook`}</em>{` `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`useEffect`}</code>{` para lidar efeitos colaterais sobre as renderizações do componente.`}</p>\n    <p>{`No exemplo abaixo será exibido um log com o valor do estado `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`count`}</code>{` na primeira montagem do componente e toda vez que o mesmo for renderizado novamente. Ao final da execução do efeito e também quando o componente se demontar, o log informando a ocorrência será executado através da função retornada pelo `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`useEffect`}</code>{`.`}</p>\n    <Gist id=\"3fc32977e1a27bbdca62d93c6b1bd70b\" file=\"UseEffectExemple.js\" mdxType=\"Gist\" />\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://codesandbox.io/s/react-hooks-useeffect-exemplo-4k5fc?file=/src/App.js\"\n      }}>{`https://codesandbox.io/s/react-hooks-useeffect-exemplo-4k5fc?file=/src/App.js`}</a></p>\n    <p>{`As funções que são retornadas por um `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`useEffect`}</code>{` são conhecidas como “funções de limpeza”, normalmente usadas para limpar a lógica do componente e remover eventos antes da próxima renderização. É possível compreender sua execução analisando as mensagens de log. Sempre que o estado mudar e uma nova renderização for se iniciar, a função de limpeza será executada antes que o efeito da próxima renderização ocorra.`}</p>\n    <p>{`É possível customizar a execução do efeito através do segundo parâmetro opcional do `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`useEffect`}</code>{`, para otimizar a performance do componente pulando a execução em momentos não necessários.`}</p>\n    <p>{`No próximo exemplo o efeito que executa o log do contador será iniciado apenas quando o estado `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`count`}</code>{` for atualizado. O mesmo se aplica ao log sobre o nome da pessoa que será executado na atualização do estado `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`person`}</code>{`.`}</p>\n    <Gist id=\"3fc32977e1a27bbdca62d93c6b1bd70b\" file=\"UseEffectExemple2.js\" mdxType=\"Gist\" />\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://codesandbox.io/s/react-hooks-useeffect-pulando-execucao-exemplo-61yvv?file=/src/App.js:0-599\"\n      }}>{`https://codesandbox.io/s/react-hooks-useeffect-pulando-execucao-exemplo-61yvv?file=/src/App.js:0-599`}</a></p>\n    <p>{`No exemplo acima a lógica pertencente a cada um dos estados se mantém separada de forma organizada em dois efeitos distintos, diferente de um componente de classe do qual é nessário que todas as lógicas compartilhem os mesmos métodos de ciclo de vida, fazendo com que as duas lógicas sejam executados em toda renderização do componente. Veja o exemplo abaixo:`}</p>\n    <Gist id=\"3fc32977e1a27bbdca62d93c6b1bd70b\" file=\"ClassComponentLifeCycleExample.js\" mdxType=\"Gist\" />\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://codesandbox.io/s/react-ciclo-de-vida-exemplo-gzgh7?file=/src/App.js:0-831\"\n      }}>{`https://codesandbox.io/s/react-ciclo-de-vida-exemplo-gzgh7?file=/src/App.js:0-831`}</a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Obs: É possível impedir a que os dois logs sejam executados em toda renderização de um componente de classe, ao invés de executar apenas quando o estado referente ao log é atualizado, como ocorre no exemplo em Hooks. Seria necessário aplicar condicionais verificando a mudança do estado, o que tornaria ainda mais confusa a lógica em seu ciclo de vida.`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Obs: É possível simular a execução dos métodos de ciclo de vida componentDidMount e componentWillUnmount em um componente de função passando um vetor vazio [] no segundo parâmetro do useEffect. Desta maneira o valor das dependências do efeito sempre serão as mesmas, garantindo que ele e seu método de limpeza seja executado apenas uma vez.`}</p>\n    </blockquote>\n    <h3>{`Criando seu prório Hook`}</h3>\n    <p>{`Com o crescimento de um projeto, é comum durante o desenvolvimento encontrar comportamentos e lógicas de estado que se repetem, normalmente espalhadas em diferentes componentes. Para evitar a redundância do código e facilitar a manuntenção do projeto, em componentes de função, é possível criar e utilizar um `}<em parentName=\"p\">{`Hook`}</em>{` personalizado para lidar com a lógica que é compartilhada entre os componentes.`}</p>\n    <p>{`Um exemplo seria a busca pelo tamanho da janela do navegador para lidar com a responsividade. Em projetos `}<em parentName=\"p\">{`WEB,`}</em>{` é comum encontrar componentes que necessitam identificar o tamanho da janela para mudar seu comportamento e se adequar ao espaço disponível. O código abaixo ilustra a criação de um `}<em parentName=\"p\">{`Hook`}</em>{` customizado, ele nos permite obter a largura atual da janela em qualquer componente de função.`}</p>\n    <Gist id=\"3fc32977e1a27bbdca62d93c6b1bd70b\" file=\"useWindowWidth.js\" mdxType=\"Gist\" />\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://codesandbox.io/s/hook-customizado-0n0gu?file=/src/useWindowWidth.js:0-411\"\n      }}>{`https://codesandbox.io/s/hook-customizado-0n0gu?file=/src/useWindowWidth.js:0-411`}</a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Obs: useLayoutEffect é um Hook do React que é sempre executado de forma síncrona após a renderização do componente. Muito utilizado para leitura do DOM.`}</p>\n    </blockquote>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Obs: É aconcelhável seguir a convenção de utilização do use no início de todo nome de Hook.`}</p>\n    </blockquote>\n    <p>{`Sempre que a dimensão da janela mudar, o evento `}<em parentName=\"p\">{`resize`}</em>{` será disparado, atualizando o estado `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`width`}</code>{` e retornando a largura atual para o componente onde o `}<em parentName=\"p\">{`Hook`}</em>{` é usado.`}</p>\n    <p>{`Para demonstrar a utilização do `}<em parentName=\"p\">{`Hook`}</em>{`, o componente abaixo mudará a descrição de `}<em parentName=\"p\">{`Desktop`}</em>{` para `}<em parentName=\"p\">{`Mobile`}</em>{` quando a largura da janela estiver abaixo `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`500px`}</code>{`.`}</p>\n    <Gist id=\"3fc32977e1a27bbdca62d93c6b1bd70b\" file=\"App.js\" mdxType=\"Gist\" />\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://codesandbox.io/s/hook-customizado-0n0gu?file=/src/App.js\"\n      }}>{`https://codesandbox.io/s/hook-customizado-0n0gu?file=/src/App.js`}</a></p>\n    <p>{`A largura atual da janela sempre estará disponível em `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`width`}</code>{`. Mesmo que a janela seja redimencionada, o `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`useWindowWidth`}</code>{` manterá o valor atualizado.`}</p>\n    <h3>{`Conclusão`}</h3>\n    <p>{`O `}<em parentName=\"p\">{`Hooks`}</em>{` é uma alternativa a componentes de classe com o objetivo de simplificar e organizar componentes React. Com códigos simples e bem divididos através do `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`useEffect`}</code>{`, criando `}<em parentName=\"p\">{`Hook`}</em>{` customizado para reaproveitar lógicas de estado que se repetem e até removendo a necessidade do uso do `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`this`}</code>{` para desenvolvedores iniciantes.`}</p>\n    <p>{`Este é um resumo do básico necessário para a utilização do `}<em parentName=\"p\">{`Hooks`}</em>{`, sobre este tema podemos encontrar maiores informações e detalhes na própria documentação do `}<a parentName=\"p\" {...{\n        \"href\": \"https://pt-br.reactjs.org/docs/hooks-intro.html\"\n      }}>{`React`}</a>{`. Agora cabe a você se aventurar nesta brincadeira!`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}